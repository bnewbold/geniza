
next:
- fix append bug
- non-sparse 'has'/'has_all' implementations
x appending to register (sans bitfield)
- verifying register (sans bitfield)
- reading/writing secret key for register
- bitfield stuff (un-indexed)
    https://docs.rs/bit_field/0.8.0/bit_field/trait.BitArray
x protobuf infra
- basic drive trait
- 'drive log' command (shows actions)
- network infra
- 'geniza clone' command
- 'geniza checkout' command
- 'geniza init', 'geniza commit' commands
- 'geniza broadcast' command
- API to link and run from, eg, python

meta:
- license
- rustfmt
- travis tests (linux, osx)

misc:
- man
- slog for logging

specific tests:
- sleep info a variety of bad sleep files, should error
- sleep create a known file, should be same as empty (also a "Rot13" algo file)
- create a register, binary compare against known-good

APIs:
- trait: register
- trait: drive
- SLEEP file
- SLEEP register
- SLEEP drive
- peer (multiple transit types)
- synchronizer (register, peers, discovery)

Old API:
sleep: SLEEP file I/O
register: hypercore registers/journal streams, signing
drive: hyperdrive
sync: dat network protocol, discover
geniza: command line, swarm



Backburner:
- disable sodiumoxide serde feature
- sodiumoxcide static link
    https://safenetforum.org/t/building-a-non-dynamically-linked-executable-of-safe-vault/9811/6
- SLEEP API: should just be empty string for algo-name, not Option<>
- I have the SLEEP/register naming wrong... sleep refers to the directory?
- refactor to something pwrite based for file I/O
    https://doc.rust-lang.org/std/os/unix/fs/trait.FileExt.html
    https://github.com/vasi/positioned-io
- mmap
    https://docs.rs/scroll/0.7.0/scroll/
- switch to byteorder for endian reads/writes
- --json args to most CLI commands
- simplify APIs
- SleepFile from existing File
- refactor key generation into generic/re-usable function
- turn magic numbers in tree nodes into declared (public?) constants
- root_nodes as an iterator? (vs returning a Vec)
